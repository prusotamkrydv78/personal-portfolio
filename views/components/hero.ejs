<section id="hero" class="relative min-h-screen flex items-center pt-20 overflow-hidden">
  <!-- 3D Background Canvas -->
  <canvas id="hero-canvas" class="absolute inset-0 w-full h-full"></canvas>
  
  <!-- Animated Gradient Orbs -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute top-1/4 -left-20 w-80 h-80 bg-primary rounded-full opacity-10 filter blur-3xl pulse-slow"></div>
    <div class="absolute bottom-1/4 -right-20 w-80 h-80 bg-secondary rounded-full opacity-10 filter blur-3xl pulse-slow" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-accent rounded-full opacity-5 filter blur-3xl pulse-slow" style="animation-delay: 2s;"></div>
  </div>
  
  <!-- Grid Pattern Overlay -->
  <div class="absolute inset-0 bg-[url('/images/grid.svg')] bg-center opacity-5 pointer-events-none"></div>
  
  <div class="container mx-auto px-6 relative z-10">
    <div class="flex flex-col lg:flex-row items-center">
      <div class="lg:w-1/2 mb-12 lg:mb-0">
        <!-- Animated Badge -->
        <div class="inline-flex items-center px-3 py-1 rounded-full bg-primary bg-opacity-10 text-primary mb-6 reveal">
          <span class="animate-pulse mr-2">âœ¦</span>
          <span class="text-sm font-medium">Creative Web Developer</span>
        </div>
        
        <!-- Main Heading with Splitting.js animation -->
        <h1 class="hero-heading text-5xl md:text-7xl font-bold mb-6 font-display reveal" data-splitting>
          <span class="block">Hi, I'm <span class="gradient-text">Prusotam</span></span>
          <span class="block text-3xl md:text-5xl mt-2 text-gray-400">I build <span id="typewriter" class="text-white"></span></span>
        </h1>
        
        <!-- Description -->
        <p class="text-xl text-gray-400 mb-8 max-w-xl reveal">
          A passionate web developer creating beautiful, interactive, and high-performance digital experiences with modern technologies.
        </p>
        
        <!-- CTA Buttons -->
        <div class="flex flex-wrap gap-4 reveal">
          <a href="#projects" class="btn-primary">
            <span class="btn-content">
              <span>View My Work</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </span>
            <span class="btn-glare"></span>
          </a>
          <a href="#contact" class="btn-secondary">
            <span class="btn-content">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              <span>Contact Me</span>
            </span>
          </a>
        </div>
        
        <!-- Social Links -->
        <div class="mt-10 flex items-center space-x-6 text-gray-400 reveal">
          <a href="https://github.com/prusotamydv" target="_blank" class="social-link" aria-label="GitHub">
            <i class="fab fa-github text-xl"></i>
          </a>
          <a href="https://linkedin.com/in/prusotam" target="_blank" class="social-link" aria-label="LinkedIn">
            <i class="fab fa-linkedin-in text-xl"></i>
          </a>
          <a href="mailto:your-email@example.com" class="social-link" aria-label="Email">
            <i class="fas fa-envelope text-xl"></i>
          </a>
          <span class="w-px h-6 bg-gray-700"></span>
          <a href="#contact" class="text-sm hover:text-primary transition-colors duration-300 flex items-center">
            <span>Let's Talk</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Hero 3D Element -->
      <div class="lg:w-1/2 flex justify-center">
        <div class="relative">
          <!-- 3D Rotating Cube -->
          <div id="hero-3d" class="w-72 h-72 md:w-96 md:h-96 relative">
            <!-- Fallback Image (displays until 3D loads) -->
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="relative w-64 h-64 md:w-80 md:h-80 rounded-full bg-gradient-to-br from-primary/20 via-secondary/20 to-accent/20 flex items-center justify-center p-2 floating">
                <div class="absolute inset-0 rounded-full bg-gradient-to-r from-primary via-secondary to-accent opacity-30 blur-md"></div>
                <div class="relative w-full h-full rounded-full overflow-hidden border-4 border-gray-800 shadow-xl">
                  <img src="/images/profile.png" alt="Prusotam" class="w-full h-full object-cover">
                </div>
              </div>
            </div>
          </div>
          
          <!-- Experience Badge -->
          <div class="absolute -bottom-4 -right-4 glass shadow-lg rounded-lg px-4 py-2 flex items-center reveal">
            <div class="w-10 h-10 rounded-full bg-green-900 flex items-center justify-center mr-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            </div>
            <div>
              <div class="text-xs text-gray-400">Experience</div>
              <div class="font-medium text-white">2+ Years</div>
            </div>
          </div>
          
          <!-- Tech Stack Badge -->
          <div class="absolute -top-4 -left-4 glass shadow-lg rounded-lg px-4 py-2 flex items-center reveal">
            <div class="flex -space-x-2 mr-3">
              <div class="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white text-xs font-bold">A</div>
              <div class="w-8 h-8 rounded-full bg-blue-400 flex items-center justify-center text-white text-xs font-bold">T</div>
              <div class="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center text-white text-xs font-bold">G</div>
            </div>
            <div>
              <div class="text-xs text-gray-400">Tech Stack</div>
              <div class="font-medium text-white">Modern</div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Scroll Down Indicator -->
    <div class="absolute bottom-10 left-1/2 transform -translate-x-1/2 flex flex-col items-center">
      <span class="text-sm text-gray-400 mb-2">Scroll Down</span>
      <div class="w-6 h-10 border-2 border-gray-700 rounded-full flex justify-center pt-1">
        <div class="w-1.5 h-1.5 bg-primary rounded-full animate-bounce"></div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Button Styles */
  .btn-primary, .btn-secondary {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    overflow: hidden;
    transition: all 0.3s ease;
    z-index: 1;
  }
  
  .btn-primary {
    background: linear-gradient(90deg, var(--color-primary), var(--color-accent));
    color: white;
    box-shadow: 0 4px 15px rgba(99, 102, 241, 0.4);
  }
  
  .btn-secondary {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
  }
  
  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(99, 102, 241, 0.5);
  }
  
  .btn-secondary:hover {
    transform: translateY(-3px);
    background: rgba(255, 255, 255, 0.1);
    border-color: var(--color-primary);
  }
  
  .btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
  }
  
  .btn-glare {
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle at center, rgba(255, 255, 255, 0.3) 0%, transparent 50%);
    transform: scale(0);
    opacity: 0;
    transition: transform 0.5s ease, opacity 0.5s ease;
    z-index: 0;
  }
  
  .btn-primary:hover .btn-glare {
    transform: scale(1);
    opacity: 1;
  }
  
  /* Social Link Hover Effect */
  .social-link {
    position: relative;
    display: inline-block;
    transition: all 0.3s ease;
  }
  
  .social-link::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s ease;
  }
  
  .social-link:hover {
    color: white;
    transform: translateY(-2px);
  }
  
  .social-link:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Typewriter effect
    const typewriterElement = document.getElementById('typewriter');
    const words = ['websites.', 'experiences.', 'interfaces.', 'applications.'];
    let wordIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let typeSpeed = 100;
    
    function type() {
      const currentWord = words[wordIndex];
      
      if (isDeleting) {
        typewriterElement.textContent = currentWord.substring(0, charIndex - 1);
        charIndex--;
        typeSpeed = 50;
      } else {
        typewriterElement.textContent = currentWord.substring(0, charIndex + 1);
        charIndex++;
        typeSpeed = 150;
      }
      
      if (!isDeleting && charIndex === currentWord.length) {
        isDeleting = true;
        typeSpeed = 1500; // Pause at the end of the word
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        wordIndex = (wordIndex + 1) % words.length;
        typeSpeed = 500; // Pause before typing the next word
      }
      
      setTimeout(type, typeSpeed);
    }
    
    // Start the typewriter effect
    setTimeout(type, 1000);
    
    // 3D Background with Three.js
    function initThreeJsBackground() {
      const canvas = document.getElementById('hero-canvas');
      
      // Create scene, camera, and renderer
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(window.devicePixelRatio);
      
      // Create particles
      const particlesGeometry = new THREE.BufferGeometry();
      const particlesCount = 1500;
      const posArray = new Float32Array(particlesCount * 3);
      
      for (let i = 0; i < particlesCount * 3; i++) {
        posArray[i] = (Math.random() - 0.5) * 10;
      }
      
      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
      
      // Create material
      const particlesMaterial = new THREE.PointsMaterial({
        size: 0.02,
        color: 0x6366f1,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending
      });
      
      // Create mesh
      const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
      scene.add(particlesMesh);
      
      // Position camera
      camera.position.z = 3;
      
      // Mouse movement effect
      let mouseX = 0;
      let mouseY = 0;
      
      function onDocumentMouseMove(event) {
        mouseX = (event.clientX - window.innerWidth / 2) / 100;
        mouseY = (event.clientY - window.innerHeight / 2) / 100;
      }
      
      document.addEventListener('mousemove', onDocumentMouseMove);
      
      // Handle window resize
      window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });
      
      // Animation loop
      function animate() {
        requestAnimationFrame(animate);
        
        particlesMesh.rotation.x += 0.0005;
        particlesMesh.rotation.y += 0.0005;
        
        // Respond to mouse movement
        particlesMesh.rotation.x += mouseY * 0.0005;
        particlesMesh.rotation.y += mouseX * 0.0005;
        
        renderer.render(scene, camera);
      }
      
      animate();
    }
    
    // Initialize 3D background
    initThreeJsBackground();
    
    // Create 3D rotating cube for hero section
    function init3DHero() {
      const container = document.getElementById('hero-3d');
      
      // Create scene, camera, and renderer
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);
      
      // Create a group to hold all objects
      const group = new THREE.Group();
      scene.add(group);
      
      // Create a glowing sphere
      const sphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);
      const sphereMaterial = new THREE.MeshBasicMaterial({
        color: 0x6366f1,
        wireframe: true,
        transparent: true,
        opacity: 0.3
      });
      const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
      group.add(sphere);
      
      // Create an outer sphere
      const outerSphereGeometry = new THREE.SphereGeometry(2, 32, 32);
      const outerSphereMaterial = new THREE.MeshBasicMaterial({
        color: 0xec4899,
        wireframe: true,
        transparent: true,
        opacity: 0.1
      });
      const outerSphere = new THREE.Mesh(outerSphereGeometry, outerSphereMaterial);
      group.add(outerSphere);
      
      // Create particles around the sphere
      const particlesGeometry = new THREE.BufferGeometry();
      const particlesCount = 500;
      const posArray = new Float32Array(particlesCount * 3);
      
      for (let i = 0; i < particlesCount * 3; i += 3) {
        const radius = 2.5 + Math.random() * 1;
        const theta = Math.random() * Math.PI * 2;
        const phi = Math.random() * Math.PI;
        
        posArray[i] = radius * Math.sin(phi) * Math.cos(theta);
        posArray[i + 1] = radius * Math.sin(phi) * Math.sin(theta);
        posArray[i + 2] = radius * Math.cos(phi);
      }
      
      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
      
      const particlesMaterial = new THREE.PointsMaterial({
        size: 0.03,
        color: 0x8b5cf6,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending
      });
      
      const particles = new THREE.Points(particlesGeometry, particlesMaterial);
      group.add(particles);
      
      // Position camera
      camera.position.z = 5;
      
      // Animation loop
      function animate() {
        requestAnimationFrame(animate);
        
        group.rotation.y += 0.003;
        group.rotation.x += 0.001;
        
        sphere.rotation.y -= 0.005;
        outerSphere.rotation.y += 0.002;
        outerSphere.rotation.x += 0.001;
        
        renderer.render(scene, camera);
      }
      
      animate();
      
      // Handle window resize
      window.addEventListener('resize', () => {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
      });
    }
    
    // Initialize 3D hero element
    init3DHero();
  });
</script>
